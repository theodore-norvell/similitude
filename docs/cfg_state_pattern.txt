This document contains a context free grammar for the state pattern created for the Use cases.
Reading this, one can form a map of how the states progress among ech other.

=====================================================================================================


TODO.  Either delete this file or make it agree with the VPP state diagram.

CanvasIdleState -->
	event( SidebarDragAndDropEvent )
	reaction( add a new component to the circuit diagram )
	CanvasIdleState
	
CanvasIdleState -->
	event( CanvasMouseDownEvent( x, y ) )
	(  test( nothing was hit )
	   DownOnEmptyState(x, y)
	|
	   test( Something was hit, but nothing hit was selected )
	   let endpoint be any of the endpoints that were hit 
	   DownOnNonSelection( x, y )
	|
	   test( something was hit that is selected )
	   let clickedObjects be the set of all links and components that were hit
	   MouseDownOnSelection( clickedObjects, x, y )
	)

DownOnEmptyState(x, y) --> 
	event( CanvasMouseUpEvent )
	reaction( clear the selection and checkpoint )
	CanvasIdleState

DownOnEmptyState(x, y) --> 
	event( CanvasMouseMoveEvent )
	reaction( Will add a new link to the circuit diagram)
	MoveEndpointState( one of the endpoints of the new link )

DownOnNonSelection( x, y ) --> 
	event( CanvasMouseUpEvent )
	reaction( If the mouse-down event was over any links, let X be that set of links. 
              Otherwise let X be the set of components the mouse-down event was over. 
              Add X to the selection 
              Checkpoint )
	CanvasIdleState

DownOnEmptyState(x, y) --> 
	event( CanvasMouseMoveEvent )
	reaction( Will add a new link to the circuit diagram)
	MoveEndpointState( one of the endpoints of the new link )

MoveEndpointState( endpoint ) --> 
	event( CanvasMouseUpEvent )
	reaction( normalize the circuit diagram and checkpoint )
	CanvasIdleState

MoveEndpointState( endpoint ) --> 
	event( CanvasMouseMoveEvent )
	reaction( update the position of endpoint to match the mouse )
	MoveEndpointState( endPoint )

MouseDownOnSelection( passedObjects, x, y ) --> 
	event( CanvasMouseUpEvent )
	reaction( remove passedObjects from the selection. Normalize. Checkpoint )
	CanvasIdleState

MouseDownOnSelection( passedObjects, x, y ) --> 
	event( CanvasMouseMoveEvent( newX, newY ) )
	reaction( moves the current selection around with the mouse )
	MoveSelectionState( newX, newY )

MoveSelectionState( x, y ) --> 
	event( CanvasMouseUpEvent )
	reaction( normalize the circuit diagram and checkpoint )
	CanvasIdleState

MoveSelectionState( x, y ) --> 
	event( CanvasMouseMoveEvent( newX, newY ) )
	reaction( move the selection )
	MoveSelectionState( newX, newY )
